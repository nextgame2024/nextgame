{% extends 'dashboardBase.html.twig' %}

{% block body %}

{% if display == 0 %}
  {{ include ('scoreboard/_umpire_display_right.html.twig') }}
{% else %}
  {{ include ('scoreboard/_umpire_display_left.html.twig') }}
{% endif %}

<div id="finishSetModal-{{ id }}" class="hidden fixed z-10 inset-0 overflow-y-auto">
  <div class="flex items-center justify-center min-h-screen px-4 text-center">
    <div class="bg-gray-900 border-4 border-white text-white rounded-lg p-8 max-w-lg w-full shadow-xl relative dark:bg-gray-700">
      <h2 class="text-lg font-semibold mb-4">Are you sure you want to continue?</h2>
      <p class="mb-6">This action cannot be undone.</p>
      <form id="finishSetForm-{{ id }}" method="post" action="{{ path('app_finish_set', {id: id}) }}" onsubmit="event.preventDefault(); finishSet({{ id }});">
        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ id) }}">
        <div class="flex justify-center">
          <button type="submit" id="deleteBtn-{{ id }}" class="bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 px-4 rounded  mr-2">Submit</button>
          <button type="button" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded" onclick="closeModal('finishSetModal-{{ id }}')">Cancel</button>
        </div>
      </form>
      <div id="spinner-{{ id }}" class="hidden absolute inset-0 flex items-center justify-center z-20 bg-white bg-opacity-75">
        <svg class="animate-spin h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path>
        </svg>
      </div>
    </div>
  </div>
</div>

<div id="finishGameModal-{{ id }}" class="hidden fixed z-10 inset-0 overflow-y-auto">
  <div class="flex items-center justify-center min-h-screen px-4 text-center">
    <div class="bg-gray-900 border-4 border-white text-white rounded-lg p-8 max-w-lg w-full shadow-xl relative dark:bg-gray-700">
      <h2 class="text-lg font-semibold mb-4">Are you sure you want to continue?</h2>
      <p class="mb-6">This action cannot be undone.</p>
      <form method="post" action="{{ path('app_finish_game', {id: id}) }}" onsubmit="showLoadingSpinner('{{ id }}')">
        <input type="hidden" name="_token" value="{{ csrf_token('delete' ~ id) }}">
        <div class="flex justify-center">
          <button type="submit" id="deleteBtn-{{ id }}" class="bg-yellow-500 hover:bg-yellow-600 text-black font-semibold py-2 px-4 rounded  mr-2">Submit</button>
          <button type="button" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded" onclick="closeModal('finishGameModal-{{ id }}')">Cancel</button>
        </div>
      </form>
      <div id="spinner-{{ id }}" class="hidden absolute inset-0 flex items-center justify-center z-20 bg-white bg-opacity-75">
        <svg class="animate-spin h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path>
        </svg>
      </div>
    </div>
  </div>
</div>

<div id="loading-spinner" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 dark:bg-gray-900 dark:bg-opacity-50 z-50" style="display: none;">
    <svg class="w-16 h-16 text-gray-500 animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8H4z"></path>
    </svg>
</div>

<script>
    function showLoadingSpinner() {
        document.getElementById('loading-spinner').style.display = 'flex';
    }

    function hideLoadingSpinner() {
        document.getElementById('loading-spinner').style.display = 'none';
    }

    document.querySelectorAll('[data-modal-target]').forEach(button => {
      button.addEventListener('click', function() {
        const modalId = this.getAttribute('data-modal-target');
        const modal = document.getElementById(modalId);

        if (modal) {
          modal.classList.remove('hidden');
        } else {
          console.error('Modal with id ' + modalId + ' not found');
        }
      });
    });

    function closeModal(modalId) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.classList.add('hidden');
      } else {
        console.error('Modal with id ' + modalId + ' not found');
      }
    }

    function updateScore(gameId, playerId) {
        showLoadingSpinner();
        //fetch(`/public/index.php/scoreboard/add-score-player/${gameId}/${playerId}`, {
        fetch(`/scoreboard/add-score-player/${gameId}/${playerId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('playerOne').innerText = data.playerOnePoints;
            document.getElementById('playerTwo').innerText = data.playerTwoPoints;
        })
        .catch(error => console.error('Error:', error))
        .finally(() => {
            hideLoadingSpinner();
        });
    }

    function subtractScore(gameId, playerId) {
        showLoadingSpinner();
        //fetch(`/public/index.php/scoreboard/subtract-score/${gameId}/${playerId}`, {
        fetch(`/scoreboard/subtract-score/${gameId}/${playerId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('playerOne').innerText = data.playerOnePoints;
            document.getElementById('playerTwo').innerText = data.playerTwoPoints;
        })
        .catch(error => console.error('Error:', error))
        .finally(() => {
            hideLoadingSpinner();
        });
    }

    function finishSet(gameId) {
        closeModal('finishSetModal-' + gameId);
        showLoadingSpinner();
        fetch(document.getElementById('finishSetForm-' + gameId).action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
        })
        .then(response => response.json())
        .then(data => {
            document.getElementById('setsPlayerOne').innerText = data.setsPlayerOne;
            document.getElementById('setsPlayerTwo').innerText = data.setsPlayerTwo;
            document.getElementById('playerOne').innerText = data.pointsPlayerOne;
            document.getElementById('playerTwo').innerText = data.pointsPlayerTwo;
        })
        .catch(error => console.error('Error:', error))
        .finally(() => {
            hideLoadingSpinner();
        });
    }
</script>
{% endblock %}
